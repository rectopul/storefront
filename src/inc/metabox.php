<?php
/**
 * Preço de desconto nas Recomendações
 */

 /**
 * Generated by the WordPress Meta Box generator
 * at http://jeremyhixon.com/tool/wordpress-meta-box-generator/
 */

function preo_get_meta( $value ) {
	global $post;

	$field = get_post_meta( $post->ID, $value, true );
	if ( ! empty( $field ) ) {
		return is_array( $field ) ? stripslashes_deep( $field ) : stripslashes( wp_kses_decode_entities( $field ) );
	} else {
		return false;
	}
}

function preo_add_meta_box() {
	add_meta_box(
		'preo-preo',
		__( 'Preço', 'preo' ),
		'preo_html',
		'post',
		'normal',
		'default'
	);
	add_meta_box(
		'preo-preo',
		__( 'Preço', 'preo' ),
		'preo_html',
		'recomendacao',
		'normal',
		'default'
	);
}
add_action( 'add_meta_boxes', 'preo_add_meta_box' );

function preo_html( $post) {
	wp_nonce_field( '_preo_nonce', 'preo_nonce' ); ?>

	<p>Valor do desconto ao recomendar</p>

	<p>
		<label for="preo_valor"><?php _e( 'Valor', 'preo' ); ?></label><br>
		<input type="text" name="preo_valor" id="preo_valor" value="<?php echo preo_get_meta( 'preo_valor' ); ?>" placeholder="R$ 00">
	</p><?php
}

function preo_save( $post_id ) {
	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
	if ( ! isset( $_POST['preo_nonce'] ) || ! wp_verify_nonce( $_POST['preo_nonce'], '_preo_nonce' ) ) return;
	if ( ! current_user_can( 'edit_post', $post_id ) ) return;

	if ( isset( $_POST['preo_valor'] ) )
		update_post_meta( $post_id, 'preo_valor', esc_attr( $_POST['preo_valor'] ) );
}
add_action( 'save_post', 'preo_save' );

/*
	Usage: preo_get_meta( 'preo_valor' )
*/

if( ! class_exists( 'Showcase_Taxonomy_Images' ) ) {
    class Showcase_Taxonomy_Images {
      
      public function __construct() {
       //
      }
  
      /**
       * Initialize the class and start calling our hooks and filters
       */
       public function init() {
       // Image actions
       add_action( 'categoria_add_form_fields', array( $this, 'add_category_image' ), 10, 2 );
       add_action( 'created_categoria', array( $this, 'save_category_image' ), 10, 2 );
       add_action( 'categoria_edit_form_fields', array( $this, 'update_category_image' ), 10, 2 );
       add_action( 'edited_categoria', array( $this, 'updated_category_image' ), 10, 2 );
       add_action( 'admin_enqueue_scripts', array( $this, 'load_media' ) );
       add_action( 'admin_footer', array( $this, 'add_script' ) );
       /* Categoria Condicoes */
       add_action( 'cat_condicao_add_form_fields', array( $this, 'add_category_image' ), 10, 2 );
       add_action( 'created_cat_condicao', array( $this, 'save_category_image' ), 10, 2 );
       add_action( 'cat_condicao_edit_form_fields', array( $this, 'update_category_image' ), 10, 2 );
       add_action( 'edited_cat_condicao', array( $this, 'updated_category_image' ), 10, 2 );
     }
  
     public function load_media() {
       if( !isset($_GET['taxonomy'])  || $_GET['taxonomy'] != 'categoria' && $_GET['taxonomy'] != 'cat_condicao') {
         return;
       }
       wp_enqueue_media();
     }
    
     /**
      * Add a form field in the new category page
      * @since 1.0.0
      */
    
     public function add_category_image( $taxonomy ) { ?>
       <div class="form-field term-group">
         <label for="showcase-taxonomy-image-id"><?php _e( 'Imagem', 'showcase' ); ?></label>
         <input type="hidden" id="showcase-taxonomy-image-id" name="showcase-taxonomy-image-id" class="custom_media_url" value="">
         <div id="category-image-wrapper"></div>
         <p>
           <input type="button" class="button button-secondary showcase_tax_media_button" id="showcase_tax_media_button" name="showcase_tax_media_button" value="<?php _e( 'Add Image', 'showcase' ); ?>" />
           <input type="button" class="button button-secondary showcase_tax_media_remove" id="showcase_tax_media_remove" name="showcase_tax_media_remove" value="<?php _e( 'Remove Image', 'showcase' ); ?>" />
         </p>
       </div>
     <?php }
  
     /**
      * Save the form field
      * @since 1.0.0
      */
     public function save_category_image( $term_id, $tt_id ) {
       if( isset( $_POST['showcase-taxonomy-image-id'] ) && '' !== $_POST['showcase-taxonomy-image-id'] ){
         add_term_meta( $term_id, 'showcase-taxonomy-image-id', absint( $_POST['showcase-taxonomy-image-id'] ), true );
       }
      }
  
      /**
       * Edit the form field
       * @since 1.0.0
       */
      public function update_category_image( $term, $taxonomy ) { ?>
        <tr class="form-field term-group-wrap">
          <th scope="row">
            <label for="showcase-taxonomy-image-id"><?php _e( 'Image', 'showcase' ); ?></label>
          </th>
          <td>
            <?php $image_id = get_term_meta( $term->term_id, 'showcase-taxonomy-image-id', true ); ?>
            <input type="hidden" id="showcase-taxonomy-image-id" name="showcase-taxonomy-image-id" value="<?php echo esc_attr( $image_id ); ?>">
            <div id="category-image-wrapper">
              <?php if( $image_id ) { ?>
                <?php echo wp_get_attachment_image( $image_id, 'thumbnail' ); ?>
              <?php } ?>
            </div>
            <p>
              <input type="button" class="button button-secondary showcase_tax_media_button" id="showcase_tax_media_button" name="showcase_tax_media_button" value="<?php _e( 'Add Image', 'showcase' ); ?>" />
              <input type="button" class="button button-secondary showcase_tax_media_remove" id="showcase_tax_media_remove" name="showcase_tax_media_remove" value="<?php _e( 'Remove Image', 'showcase' ); ?>" />
            </p>
          </td>
        </tr>
     <?php }
  
     /**
      * Update the form field value
      * @since 1.0.0
      */
     public function updated_category_image( $term_id, $tt_id ) {
       if( isset( $_POST['showcase-taxonomy-image-id'] ) && '' !== $_POST['showcase-taxonomy-image-id'] ){
         update_term_meta( $term_id, 'showcase-taxonomy-image-id', absint( $_POST['showcase-taxonomy-image-id'] ) );
       } else {
         update_term_meta( $term_id, 'showcase-taxonomy-image-id', '' );
       }
     }
   
     /**
      * Enqueue styles and scripts
      * @since 1.0.0
      */
     public function add_script() {
       if( !isset($_GET['taxonomy'])  || $_GET['taxonomy'] != 'categoria' && $_GET['taxonomy'] != 'cat_condicao' ) {
         return;
       } ?>
       <script> jQuery(document).ready( function($) {
         _wpMediaViewsL10n.insertIntoPost = '<?php _e( "Insert", "showcase" ); ?>';
         function ct_media_upload(button_class) {
           var _custom_media = true, _orig_send_attachment = wp.media.editor.send.attachment;
           $('body').on('click', button_class, function(e) {
             var button_id = '#'+$(this).attr('id');
             var send_attachment_bkp = wp.media.editor.send.attachment;
             var button = $(button_id);
             _custom_media = true;
             wp.media.editor.send.attachment = function(props, attachment){
               if( _custom_media ) {
                 $('#showcase-taxonomy-image-id').val(attachment.id);
                 $('#category-image-wrapper').html('<img class="custom_media_image" src="" style="margin:0;padding:0;max-height:100px;float:none;" />');
                 $( '#category-image-wrapper .custom_media_image' ).attr( 'src',attachment.url ).css( 'display','block' );
               } else {
                 return _orig_send_attachment.apply( button_id, [props, attachment] );
               }
             }
             wp.media.editor.open(button); return false;
           });
         }
         ct_media_upload('.showcase_tax_media_button.button');
         $('body').on('click','.showcase_tax_media_remove',function(){
           $('#showcase-taxonomy-image-id').val('');
           $('#category-image-wrapper').html('<img class="custom_media_image" src="" style="margin:0;padding:0;max-height:100px;float:none;" />');
         });
         // Thanks: http://stackoverflow.com/questions/15281995/wordpress-create-category-ajax-response
         $(document).ajaxComplete(function(event, xhr, settings) {
           var queryStringArr = settings.data.split('&');
           if( $.inArray('action=add-tag', queryStringArr) !== -1 ){
             var xml = xhr.responseXML;
             $response = $(xml).find('term_id').text();
             if($response!=""){
               // Clear the thumb image
               $('#category-image-wrapper').html('');
             }
            }
          });
        });
      </script>
     <?php }
    }
  $Showcase_Taxonomy_Images = new Showcase_Taxonomy_Images();
  $Showcase_Taxonomy_Images->init(); }

  /**
   * Metabox Fixar post
   * Fix post metabox
   * Selecionar se o post deve ser fixo em custom post
   */

  class fixarprojetoMetabox
  {
      private $screen = array('viagem', 'saude', 'compras', 'telefonia', 'construct', 'etc', 'ajuda', 'imprensa');
      private $meta_fields = array(
          array(
              'label' => 'Fixar projeto',
              'id' => 'fixarprojeto_91114',
              'default' => '0',
              'type' => 'checkbox',
          ),
      );
      public function __construct()
      {
          add_action('add_meta_boxes', array($this, 'add_meta_boxes'));
          add_action('save_post', array($this, 'save_fields'));
      }
      public function add_meta_boxes()
      {
          foreach ($this->screen as $single_screen) {
              add_meta_box(
                  'fixarprojeto',
                  __('Fixar Projeto', 'fix-project'),
                  array($this, 'meta_box_callback'),
                  $single_screen,
                  'side',
                  'default'
              );
          }
      }
      public function meta_box_callback($post)
      {
          wp_nonce_field('fixarprojeto_data', 'fixarprojeto_nonce');
          echo 'Fixar projeto na listagem';
          $this->field_generator($post);
      }
      public function field_generator($post)
      {
          $output = '';
          foreach ($this->meta_fields as $meta_field) {
              $label = '<label for="' . $meta_field['id'] . '">' . $meta_field['label'] . '</label>';
              $meta_value = get_post_meta($post->ID, $meta_field['id'], true);
              if (empty($meta_value)) {
                  $meta_value = $meta_field['default'];
              }
              switch ($meta_field['type']) {
                  case 'checkbox':
                      $input = sprintf(
                          '<input %s id=" % s" name="% s" type="checkbox" value="1">',
                          $meta_value === '1' ? 'checked' : '',
                          $meta_field['id'],
                          $meta_field['id']
                      );
                      break;
                  default:
                      $input = sprintf(
                          '<input %s id="%s" name="%s" type="%s" value="%s">',
                          $meta_field['type'] !== 'color' ? 'style="width: 100%"' : '',
                          $meta_field['id'],
                          $meta_field['id'],
                          $meta_field['type'],
                          $meta_value
                      );
              }
              $output .= $this->format_rows($label, $input);
          }
          echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
      }
      public function format_rows($label, $input)
      {
          return '<tr><th>' . $label . '</th><td>' . $input . '</td></tr>';
      }
      public function save_fields($post_id)
      {
          if (!isset($_POST['fixarprojeto_nonce']))
              return $post_id;
          $nonce = $_POST['fixarprojeto_nonce'];
          if (!wp_verify_nonce($nonce, 'fixarprojeto_data'))
              return $post_id;
          if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)
              return $post_id;
          foreach ($this->meta_fields as $meta_field) {
              if (isset($_POST[$meta_field['id']])) {
                  switch ($meta_field['type']) {
                      case 'email':
                          $_POST[$meta_field['id']] = sanitize_email($_POST[$meta_field['id']]);
                          break;
                      case 'text':
                          $_POST[$meta_field['id']] = sanitize_text_field($_POST[$meta_field['id']]);
                          break;
                  }
                  update_post_meta($post_id, $meta_field['id'], $_POST[$meta_field['id']]);
              } else if ($meta_field['type'] === 'checkbox') {
                  update_post_meta($post_id, $meta_field['id'], '0');
              }
          }
      }
  }
  if (class_exists('fixarprojetoMetabox')) {
      new fixarprojetoMetabox;
  };

  /**
   * User profile
   */

  add_action( 'show_user_profile', 'extra_user_profile_fields' );
  add_action( 'edit_user_profile', 'extra_user_profile_fields' );
  
  function extra_user_profile_fields( $user ) { ?>
      <h3><?php _e("Extra profile information", "blank"); ?></h3>
  
      <table class="form-table">
      <tr>
          <th><label for="address"><?php _e("Depoimento"); ?></label></th>
          <td>
              <textarea name="depoiment_client" id="depoiment_client" cols="30" rows="5" class="regular-text"><?php echo esc_attr( get_the_author_meta( 'depoiment_client', $user->ID ) ); ?></textarea><br />
              <span class="description"><?php _e("Por favor faça um depoimento sobre nossos serviços."); ?></span>
          </td>
      </tr>
      <!-- 
        /**
        * CPF Field in cliente panel
        * campo para cliente fornecer cpf
        */
      -->
      <tr>
          <th><label for="document_cpf"><?php _e("CPF"); ?></label></th>
          <td>
              <input type="text" name="document_cpf" id="document_cpf" value="<?php echo esc_attr( get_the_author_meta( 'document_cpf', $user->ID ) ); ?>"><br />
              <span class="description"><?php _e("Forneça o número de seu CPF sem traços e sem pontos."); ?></span>
          </td>
      </tr>
      </table>

      
  <?php }

add_action( 'personal_options_update', 'save_extra_user_profile_fields' );
add_action( 'edit_user_profile_update', 'save_extra_user_profile_fields' );

function save_extra_user_profile_fields( $user_id ) {
    if ( !current_user_can( 'edit_user', $user_id ) ) { 
        return false; 
    }
    update_user_meta( $user_id, 'document_cpf', $_POST['document_cpf'] );
    update_user_meta( $user_id, 'depoiment_client', $_POST['depoiment_client'] );
}




global $current_user; // Use global
get_currentuserinfo(); // Make sure global is set, if not set it.
if ( ! user_can( $current_user, "subscriber" ) ) // Check user object has not got subscriber role
  add_action('admin_color_scheme_picker', 'admin_color_scheme_picker');
else
  remove_action('admin_color_scheme_picker', 'admin_color_scheme_picker');

  /**
   * Gravatar
   */

   /**
 * Get either a Gravatar URL or complete image tag for a specified email address.
 *
 * @param string $email The email address
 * @param string $s Size in pixels, defaults to 80px [ 1 - 2048 ]
 * @param string $d Default imageset to use [ 404 | mp | identicon | monsterid | wavatar ]
 * @param string $r Maximum rating (inclusive) [ g | pg | r | x ]
 * @param boole $img True to return a complete IMG tag False for just the URL
 * @param array $atts Optional, additional key/value attributes to include in the IMG tag
 * @return String containing either just a URL or a complete image tag
 * @source https://gravatar.com/site/implement/images/php/
 */
function get_gravatar( $email, $s = 80, $d = 'mp', $r = 'g', $img = false, $atts = array() ) {
  $url = 'https://www.gravatar.com/avatar/';
  $url .= md5( strtolower( trim( $email ) ) );
  $url .= "?s=$s&d=$d&r=$r";
  if ( $img ) {
      $url = '<img src="' . $url . '"';
      foreach ( $atts as $key => $val )
          $url .= ' ' . $key . '="' . $val . '"';
      $url .= ' />';
  }
  return $url;
}

/**
 * Metabox Clientes 
 * Selecione o cliente responsável pelo processo!
 */

/**
 * Generated by the WordPress Meta Box generator
 * at http://jeremyhixon.com/tool/wordpress-meta-box-generator/
 */

function cliente_do_processo__get_meta( $value ) {
	global $post;

	$field = get_post_meta( $post->ID, $value, true );
	if ( ! empty( $field ) ) {
		return is_array( $field ) ? stripslashes_deep( $field ) : stripslashes( wp_kses_decode_entities( $field ) );
	} else {
		return false;
	}
}

function cliente_do_processo__add_meta_box() {
	add_meta_box(
		'cliente_do_processo_-cliente-do-processo',
		__( 'Cliente do Processo!', 'cliente_do_processo_' ),
		'cliente_do_processo__html',
		'processos',
		'side',
		'default'
	);
}
add_action( 'add_meta_boxes', 'cliente_do_processo__add_meta_box' );

function cliente_do_processo__html( $post) {
	wp_nonce_field( '_cliente_do_processo__nonce', 'cliente_do_processo__nonce' ); ?>
  <br>

	<div class="metabox_clientsprocess">
    <div class="custommetabox__containersearch">
      <label for="search__cliente"><?php _e( 'Busque e selecione o cliente do processo pelo número do cpf sem pontos e sem traços!', 'cliente_do_processo_' ); ?></label><br>
      <input type="text" name="search__cliente" id="search__cliente" value="" placeholder="Ex. 00000000000">
      <div class="Cmetabox__resultsearch"></div>
    </div>
    <h2 class="label_list_clients">Clientes Selecionados</h2>
    <div class="custommetabox_clients">
      <?php
      $clients = explode(',', cliente_do_processo__get_meta( 'cliente_do_processo__cliente' ));
      $clients = array_filter($clients);
      foreach ($clients as $key => $userid) { 
        $sistemusersreturn = get_userdata($userid); ?>
          <div class="custommetabox_client">
            <h2><?php echo $sistemusersreturn->data->display_name; ?></h2>
            <small><?php echo $sistemusersreturn->data->user_email; ?> </small>
            <div class="actions__client">
              <button class="remove_client" data-client-del="<?php echo $sistemusersreturn->data->ID;?>"><span class="dashicons dashicons-no-alt"></span></button>
            </div>
          </div>
        <?php
      }
      ?>
    </div>
		<input type="hidden" name="cliente_do_processo__cliente" id="cliente_do_processo__cliente" value="<?php echo cliente_do_processo__get_meta( 'cliente_do_processo__cliente' ); ?>">
	</div><?php
}

function cliente_do_processo__save( $post_id ) {
	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
	if ( ! isset( $_POST['cliente_do_processo__nonce'] ) || ! wp_verify_nonce( $_POST['cliente_do_processo__nonce'], '_cliente_do_processo__nonce' ) ) return;
	if ( ! current_user_can( 'edit_post', $post_id ) ) return;

	if ( isset( $_POST['cliente_do_processo__cliente'] ) )
		update_post_meta( $post_id, 'cliente_do_processo__cliente', esc_attr( $_POST['cliente_do_processo__cliente'] ) );
}
add_action( 'save_post', 'cliente_do_processo__save' );

/*
	Usage: cliente_do_processo__get_meta( 'cliente_do_processo__cliente' )
*/

