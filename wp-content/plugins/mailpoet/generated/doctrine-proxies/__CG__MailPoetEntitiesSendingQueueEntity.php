<?php

namespace MailPoetDoctrineProxies\__CG__\MailPoet\Entities;

if (!defined('ABSPATH')) exit;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class SendingQueueEntity extends \MailPoet\Entities\SendingQueueEntity implements \MailPoetVendor\Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'newsletter_rendered_body', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'newsletter_rendered_subject', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'subscribers', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'count_total', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'count_processed', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'count_to_process', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'meta', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'task', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'newsletter', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'id', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'created_at', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'updated_at', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'deleted_at'];
        }

        return ['__isInitialized__', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'newsletter_rendered_body', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'newsletter_rendered_subject', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'subscribers', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'count_total', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'count_processed', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'count_to_process', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'meta', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'task', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'newsletter', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'id', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'created_at', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'updated_at', '' . "\0" . 'MailPoet\\Entities\\SendingQueueEntity' . "\0" . 'deleted_at'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (SendingQueueEntity $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getNewsletterRenderedBody()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewsletterRenderedBody', []);

        return parent::getNewsletterRenderedBody();
    }

    /**
     * {@inheritDoc}
     */
    public function setNewsletterRenderedBody($newsletter_rendered_body)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewsletterRenderedBody', [$newsletter_rendered_body]);

        return parent::setNewsletterRenderedBody($newsletter_rendered_body);
    }

    /**
     * {@inheritDoc}
     */
    public function getNewsletterRenderedSubject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewsletterRenderedSubject', []);

        return parent::getNewsletterRenderedSubject();
    }

    /**
     * {@inheritDoc}
     */
    public function setNewsletterRenderedSubject($newsletter_rendered_subject)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewsletterRenderedSubject', [$newsletter_rendered_subject]);

        return parent::setNewsletterRenderedSubject($newsletter_rendered_subject);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubscribers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubscribers', []);

        return parent::getSubscribers();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubscribers($subscribers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubscribers', [$subscribers]);

        return parent::setSubscribers($subscribers);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountTotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountTotal', []);

        return parent::getCountTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountTotal($count_total)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountTotal', [$count_total]);

        return parent::setCountTotal($count_total);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountProcessed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountProcessed', []);

        return parent::getCountProcessed();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountProcessed($count_processed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountProcessed', [$count_processed]);

        return parent::setCountProcessed($count_processed);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountToProcess()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountToProcess', []);

        return parent::getCountToProcess();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountToProcess($count_to_process)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountToProcess', [$count_to_process]);

        return parent::setCountToProcess($count_to_process);
    }

    /**
     * {@inheritDoc}
     */
    public function getMeta()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMeta', []);

        return parent::getMeta();
    }

    /**
     * {@inheritDoc}
     */
    public function setMeta($meta)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMeta', [$meta]);

        return parent::setMeta($meta);
    }

    /**
     * {@inheritDoc}
     */
    public function getTask()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTask', []);

        return parent::getTask();
    }

    /**
     * {@inheritDoc}
     */
    public function setTask(\MailPoet\Entities\ScheduledTaskEntity $task)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTask', [$task]);

        return parent::setTask($task);
    }

    /**
     * {@inheritDoc}
     */
    public function getNewsletter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewsletter', []);

        return parent::getNewsletter();
    }

    /**
     * {@inheritDoc}
     */
    public function setNewsletter(\MailPoet\Entities\NewsletterEntity $newsletter)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewsletter', [$newsletter]);

        return parent::setNewsletter($newsletter);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTimeInterface $created_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$created_at]);

        return parent::setCreatedAt($created_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTimeInterface $updated_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updated_at]);

        return parent::setUpdatedAt($updated_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt($deleted_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', [$deleted_at]);

        return parent::setDeletedAt($deleted_at);
    }

}
